from fastapi import FastAPI, HTTPException, UploadFile, File, Form
from fastapi.responses import FileResponse, JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List, Optional, Dict, Any
import os
import shutil
import mimetypes
import stat
from pathlib import Path
import json
from datetime import datetime

app = FastAPI(
    title="Filesystem API Server",
    description="OpenAPI compliant filesystem server for file operations",
    version="1.0.0"
)

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Base directory for file operations
BASE_DIR = os.environ.get("FILESYSTEM_BASE_DIR", "/data")

# Pydantic models
class FileInfo(BaseModel):
    name: str
    path: str
    type: str  # "file" or "directory"
    size: Optional[int] = None
    modified: str
    permissions: str

class DirectoryListing(BaseModel):
    path: str
    items: List[FileInfo]

class FileContent(BaseModel):
    content: str
    encoding: str = "utf-8"

class CreateDirectoryRequest(BaseModel):
    path: str

class WriteFileRequest(BaseModel):
    path: str
    content: str
    encoding: str = "utf-8"

def safe_path(path: str) -> Path:
    """Ensure path is within BASE_DIR"""
    full_path = Path(BASE_DIR) / path.lstrip('/')
    try:
        full_path.resolve().relative_to(Path(BASE_DIR).resolve())
        return full_path
    except ValueError:
        raise HTTPException(status_code=400, detail="Invalid path")

def get_file_info(path: Path) -> FileInfo:
    """Get file information"""
    stat_info = path.stat()
    return FileInfo(
        name=path.name,
        path=str(path.relative_to(BASE_DIR)),
        type="directory" if path.is_dir() else "file",
        size=stat_info.st_size if path.is_file() else None,
        modified=datetime.fromtimestamp(stat_info.st_mtime).isoformat(),
        permissions=oct(stat_info.st_mode)[-3:]
    )

@app.get("/", response_model=Dict[str, str])
async def root():
    """API root endpoint"""
    return {
        "message": "Filesystem API Server",
        "docs": "/docs",
        "openapi": "/openapi.json"
    }

@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {"status": "healthy"}

@app.get("/files", response_model=DirectoryListing)
async def list_directory(path: str = ""):
    """List files and directories"""
    try:
        dir_path = safe_path(path)
        if not dir_path.exists():
            raise HTTPException(status_code=404, detail="Directory not found")
        if not dir_path.is_dir():
            raise HTTPException(status_code=400, detail="Path is not a directory")
        
        items = []
        for item in sorted(dir_path.iterdir()):
            try:
                items.append(get_file_info(item))
            except (OSError, PermissionError):
                continue  # Skip inaccessible files
        
        return DirectoryListing(
            path=path,
            items=items
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/files/{file_path:path}/info", response_model=FileInfo)
async def get_file_info_endpoint(file_path: str):
    """Get file or directory information"""
    try:
        path = safe_path(file_path)
        if not path.exists():
            raise HTTPException(status_code=404, detail="File not found")
        
        return get_file_info(path)
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/files/{file_path:path}/content")
async def read_file(file_path: str, download: bool = False):
    """Read file content or download file"""
    try:
        path = safe_path(file_path)
        if not path.exists():
            raise HTTPException(status_code=404, detail="File not found")
        if not path.is_file():
            raise HTTPException(status_code=400, detail="Path is not a file")
        
        if download:
            return FileResponse(
                path=str(path),
                filename=path.name,
                media_type='application/octet-stream'
            )
        
        # Try to read as text
        try:
            content = path.read_text(encoding='utf-8')
            return FileContent(content=content, encoding="utf-8")
        except UnicodeDecodeError:
            # If not text, return file info instead
            mime_type, _ = mimetypes.guess_type(str(path))
            return JSONResponse({
                "error": "Binary file cannot be displayed as text",
                "mime_type": mime_type,
                "size": path.stat().st_size,
                "download_url": f"/files/{file_path}/content?download=true"
            })
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/files/{file_path:path}/content")
async def write_file(file_path: str, request: WriteFileRequest):
    """Write content to file"""
    try:
        path = safe_path(file_path)
        
        # Create parent directories if they don't exist
        path.parent.mkdir(parents=True, exist_ok=True)
        
        path.write_text(request.content, encoding=request.encoding)
        
        return {"message": f"File {file_path} written successfully"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/files/{file_path:path}/upload")
async def upload_file(file_path: str, file: UploadFile = File(...)):
    """Upload a file"""
    try:
        path = safe_path(file_path)
        
        # Create parent directories if they don't exist
        path.parent.mkdir(parents=True, exist_ok=True)
        
        with open(path, "wb") as buffer:
            shutil.copyfileobj(file.file, buffer)
        
        return {"message": f"File {file_path} uploaded successfully", "size": path.stat().st_size}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/directories")
async def create_directory(request: CreateDirectoryRequest):
    """Create a directory"""
    try:
        path = safe_path(request.path)
        path.mkdir(parents=True, exist_ok=True)
        
        return {"message": f"Directory {request.path} created successfully"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.delete("/files/{file_path:path}")
async def delete_file_or_directory(file_path: str):
    """Delete a file or directory"""
    try:
        path = safe_path(file_path)
        if not path.exists():
            raise HTTPException(status_code=404, detail="File or directory not found")
        
        if path.is_dir():
            shutil.rmtree(path)
            return {"message": f"Directory {file_path} deleted successfully"}
        else:
            path.unlink()
            return {"message": f"File {file_path} deleted successfully"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/files/{source_path:path}/copy")
async def copy_file_or_directory(source_path: str, destination: str = Form(...)):
    """Copy a file or directory"""
    try:
        src_path = safe_path(source_path)
        dest_path = safe_path(destination)
        
        if not src_path.exists():
            raise HTTPException(status_code=404, detail="Source not found")
        
        if src_path.is_dir():
            shutil.copytree(src_path, dest_path, dirs_exist_ok=True)
        else:
            dest_path.parent.mkdir(parents=True, exist_ok=True)
            shutil.copy2(src_path, dest_path)
        
        return {"message": f"Copied {source_path} to {destination}"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/files/{source_path:path}/move")
async def move_file_or_directory(source_path: str, destination: str = Form(...)):
    """Move a file or directory"""
    try:
        src_path = safe_path(source_path)
        dest_path = safe_path(destination)
        
        if not src_path.exists():
            raise HTTPException(status_code=404, detail="Source not found")
        
        dest_path.parent.mkdir(parents=True, exist_ok=True)
        shutil.move(str(src_path), str(dest_path))
        
        return {"message": f"Moved {source_path} to {destination}"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)